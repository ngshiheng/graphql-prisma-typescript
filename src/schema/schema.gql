# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Authentication payload model"""
type AuthPayload {
  """Token that expires after a certain period of time"""
  token: String!

  """User model"""
  user: User!
}

"""Message payload"""
type MessagePayload {
  """Message that is returned to the user"""
  message: String!
}

type Mutation {
  createPost(input: PostCreateInput!): Post!
  updatePost(input: PostUpdateInput!, id: String!): Post!
  deletePost(id: String!): Post!
  createUser(input: UserCreateInput!): AuthPayload!
  register(email: String!, password: String!, name: String): AuthPayload!
  login(password: String!, email: String!): AuthPayload!
  updateUser(input: UserUpdateInput!, id: String!): User!
  deleteUser(id: String!): User!
  resetPassword(email: String!): MessagePayload!
  updatePassword(password: String!): MessagePayload!
}

type PageInfo {
  """Check if the current query has next page"""
  hasNextPage: Boolean!

  """Check if the current query has previous page"""
  hasPreviousPage: Boolean!

  """ID of the first object of the current page"""
  startCursor: String!

  """ID of the last object of the current page"""
  endCursor: String!
}

"""Post model"""
type Post {
  """Unique ID of the post"""
  id: ID!

  """Title of the post"""
  title: String!

  """Category of the post"""
  category: PostCategory!

  """Author of the post"""
  author: User!

  """Date of which the post is created"""
  createdAt: String!

  """Date of which the post is last updated"""
  updatedAt: String!
}

"""Categories available for the post"""
enum PostCategory {
  CAREER
  EDUCATION
  FINANCE
  FITNESS
  FOOD
  GAMING
  HEALTH
  NATURE
  OTHER
  PETS
  SPORTS
  TECHNOLOGY
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Post creation inputs"""
input PostCreateInput {
  title: String!
  category: PostCategory!
}

"""Connections between nodes"""
type PostEdge {
  """Data of the Post object"""
  node: Post!

  """Cursor used for posts pagination"""
  cursor: String!
}

"""Filter order by input"""
enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  category_ASC
  category_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Post update inputs"""
input PostUpdateInput {
  title: String
  category: PostCategory
}

type Query {
  post(id: String!): Post!
  posts(orderBy: PostOrderByInput, last: Int, first: Int, before: String, after: String, skip: Int, filter: String): PostConnection!
  user(id: String!): User!
  users(orderBy: UserOrderByInput, last: Int, first: Int, before: String, after: String, skip: Int, filter: String): UserConnection!
}

"""User model"""
type User {
  """Unique ID of the user"""
  id: ID!

  """Name of the user"""
  name: String

  """Email of the user"""
  email: String!

  """Role of the user"""
  role: UserRole!

  """Posts authored by the user"""
  posts(orderBy: PostOrderByInput, last: Int, first: Int, before: String, after: String, skip: Int, filter: String): PostConnection!

  """Date of which the user is created"""
  createdAt: String!

  """Date of which the user is last updated"""
  updatedAt: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""User creation inputs"""
input UserCreateInput {
  email: String!
  password: String!
  name: String
  role: UserRole!
}

"""Connections between nodes"""
type UserEdge {
  """Data of the User object"""
  node: User!

  """Cursor used for users pagination"""
  cursor: String!
}

"""Filter order by input"""
enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Roles available for users"""
enum UserRole {
  ADMIN
  USER
}

"""User update inputs"""
input UserUpdateInput {
  name: String
  email: String
}
